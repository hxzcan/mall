<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.ican.dao.UserMapper" >
  <resultMap id="BaseResultMap" type="com.ican.pojo.User" >
    <constructor >
      <idArg column="id" jdbcType="INTEGER" javaType="java.lang.Integer" />
      <arg column="userName" jdbcType="VARCHAR" javaType="java.lang.String" />
      <arg column="password" jdbcType="VARCHAR" javaType="java.lang.String" />
      <arg column="email" jdbcType="VARCHAR" javaType="java.lang.String" />
      <arg column="phone" jdbcType="VARCHAR" javaType="java.lang.String" />
      <arg column="question" jdbcType="VARCHAR" javaType="java.lang.String" />
      <arg column="answer" jdbcType="VARCHAR" javaType="java.lang.String" />
      <arg column="role" jdbcType="INTEGER" javaType="java.lang.Integer" />
      <arg column="create_time" jdbcType="TIMESTAMP" javaType="java.util.Date" />
      <arg column="update_time" jdbcType="TIMESTAMP" javaType="java.util.Date" />
    </constructor>
  </resultMap>
  <sql id="Base_Column_List" >
    id, userName, password, email, phone, question, answer, role, create_time, update_time
  </sql>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
    select 
    <include refid="Base_Column_List" />
    from ican_user
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
    delete from ican_user
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <insert id="insert" parameterType="com.ican.pojo.User" >
    insert into ican_user (id, userName, password, 
      email, phone, question, 
      answer, role, create_time, 
      update_time)
    values (#{id,jdbcType=INTEGER}, #{username,jdbcType=VARCHAR}, #{password,jdbcType=VARCHAR}, 
      #{email,jdbcType=VARCHAR}, #{phone,jdbcType=VARCHAR}, #{question,jdbcType=VARCHAR}, 
      #{answer,jdbcType=VARCHAR}, #{role,jdbcType=INTEGER}, #{createTime,jdbcType=TIMESTAMP}, 
      #{updateTime,jdbcType=TIMESTAMP})
  </insert>
  <insert id="insertSelective" parameterType="com.ican.pojo.User" >
    insert into ican_user
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        id,
      </if>
      <if test="username != null" >
        userName,
      </if>
      <if test="password != null" >
        password,
      </if>
      <if test="email != null" >
        email,
      </if>
      <if test="phone != null" >
        phone,
      </if>
      <if test="question != null" >
        question,
      </if>
      <if test="answer != null" >
        answer,
      </if>
      <if test="role != null" >
        role,
      </if>
        create_time,
        update_time,

    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        #{id,jdbcType=INTEGER},
      </if>
      <if test="username != null" >
        #{username,jdbcType=VARCHAR},
      </if>
      <if test="password != null" >
        #{password,jdbcType=VARCHAR},
      </if>
      <if test="email != null" >
        #{email,jdbcType=VARCHAR},
      </if>
      <if test="phone != null" >
        #{phone,jdbcType=VARCHAR},
      </if>
      <if test="question != null" >
        #{question,jdbcType=VARCHAR},
      </if>
      <if test="answer != null" >
        #{answer,jdbcType=VARCHAR},
      </if>
      <if test="role != null" >
        #{role,jdbcType=INTEGER},
      </if>
      now(),
      now(),
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.ican.pojo.User" >
    update ican_user
    <set >
      <if test="username != null" >
        userName = #{username,jdbcType=VARCHAR},
      </if>
      <if test="password != null" >
        password = #{password,jdbcType=VARCHAR},
      </if>
      <if test="email != null" >
        email = #{email,jdbcType=VARCHAR},
      </if>
      <if test="phone != null" >
        phone = #{phone,jdbcType=VARCHAR},
      </if>
      <if test="question != null" >
        question = #{question,jdbcType=VARCHAR},
      </if>
      <if test="answer != null" >
        answer = #{answer,jdbcType=VARCHAR},
      </if>
      <if test="role != null" >
        role = #{role,jdbcType=INTEGER},
      </if>
      <if test="createTime != null" >
        create_time = #{createTime,jdbcType=TIMESTAMP},
      </if>
        update_time = now(),
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.ican.pojo.User" >
    update ican_user
    set userName = #{username,jdbcType=VARCHAR},
      password = #{password,jdbcType=VARCHAR},
      email = #{email,jdbcType=VARCHAR},
      phone = #{phone,jdbcType=VARCHAR},
      question = #{question,jdbcType=VARCHAR},
      answer = #{answer,jdbcType=VARCHAR},
      role = #{role,jdbcType=INTEGER},
      create_time = #{createTime,jdbcType=TIMESTAMP},
      update_time =now()
    where id = #{id,jdbcType=INTEGER}
  </update>

  <!--检查用户是否存在-->
  <select id="checkUserName" resultType="int" parameterType="string">
    SELECT COUNT(1) FROM  ican_user WHERE userName=#{username}
  </select>
  <!--检查邮箱是否存在-->
  <select id="checkEmail" resultType="int" parameterType="string">
    SELECT  COUNT(1) FROM  ican_user WHERE email=#{email}
  </select>
  <!--用户登录-->
  <!--多个参数的时候，parameterType可以设置为map-->
  <select id="userLogin" resultMap="BaseResultMap" parameterType="map">
    SELECT <include refid="Base_Column_List"/>
    FROM ican_user
    <where>
      <if test="username!=null and password!=null">
        userName=#{username} and password=#{password}
      </if>
    </where>
  </select>

  <!--忘记密码，查询出问题-->
  <select id="forgetPasswordGetQuestion" resultType="string" parameterType="string">
    SELECT question FROM ican_user
    WHERE  userName=#{username}
  </select>

  <!--查询出来答案-->
  <select id="forgetCheckAnswer" resultType="string" parameterType="map">
    SELECT answer from ican_user WHERE userName=#{username} and question=#{question}
  </select>

  <!--更新密码-->
  <update id="updatePasswordByUsername" parameterType="map">
    UPDATE  ican_user SET password=#{newPassword},update_time=now()
    where userName=#{username}
  </update>

  <!--根据userId校验密码-->
  <select id="checkPasswordByUserId" resultType="int" parameterType="map">
    SELECT COUNT(1) FROM ican_user WHERE
    id=#{userId} and password=#{oldPassword}
  </select>

  <!--根据userId校验邮箱-->
  <select id="checkEmailByUserId" resultType="int" parameterType="map">
    SELECT  count(1) FROM ican_user WHERE
    id!=#{userId} and email=#{email}
  </select>

</mapper>